// ------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------

namespace Microsoft.ServiceFabric.Common
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Represents health information reported on a health entity, such as cluster, application or node, with additional
    /// metadata added by the Health Manager.
    /// </summary>
    public partial class HealthEvent : HealthInformation
    {
        /// <summary>
        /// Initializes a new instance of the HealthEvent class.
        /// </summary>
        /// <param name="sourceId">The source name which identifies the client/watchdog/system component which generated the
        /// health information.
        /// </param>
        /// <param name="property">The property of the health information. An entity can have health reports for different
        /// properties.
        /// The property is a string and not a fixed enumeration to allow the reporter flexibility to categorize the state
        /// condition that triggers the report.
        /// For example, a reporter with SourceId "LocalWatchdog" can monitor the state of the available disk on a node,
        /// so it can report "AvailableDisk" property on that node.
        /// The same reporter can monitor the node connectivity, so it can report a property "Connectivity" on the same node.
        /// In the health store, these reports are treated as separate health events for the specified node.
        /// 
        /// Together with the SourceId, the property uniquely identifies the health information.
        /// </param>
        /// <param name="healthState">The health state of a Service Fabric entity such as Cluster, Node, Application, Service,
        /// Partition, Replica etc. Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'</param>
        /// <param name="timeToLiveInMilliSeconds">The duration for which this health report is valid. This field uses ISO8601
        /// format for specifying the duration.
        /// When clients report periodically, they should send reports with higher frequency than time to live.
        /// If clients report on transition, they can set the time to live to infinite.
        /// When time to live expires, the health event that contains the health information
        /// is either removed from health store, if RemoveWhenExpired is true, or evaluated at error, if RemoveWhenExpired
        /// false.
        /// 
        /// If not specified, time to live defaults to infinite value.
        /// </param>
        /// <param name="description">The description of the health information. It represents free text used to add human
        /// readable information about the report.
        /// The maximum string length for the description is 4096 characters.
        /// If the provided string is longer, it will be automatically truncated.
        /// When truncated, the last characters of the description contain a marker "[Truncated]", and total string size is
        /// 4096 characters.
        /// The presence of the marker indicates to users that truncation occurred.
        /// Note that when truncated, the description has less than 4096 characters from the original string.
        /// </param>
        /// <param name="sequenceNumber">The sequence number for this health report as a numeric string.
        /// The report sequence number is used by the health store to detect stale reports.
        /// If not specified, a sequence number is auto-generated by the health client when a report is added.
        /// </param>
        /// <param name="removeWhenExpired">Value that indicates whether the report is removed from health store when it
        /// expires.
        /// If set to true, the report is removed from the health store after it expires.
        /// If set to false, the report is treated as an error when expired. The value of this property is false by default.
        /// When clients report periodically, they should set RemoveWhenExpired false (default).
        /// This way, is the reporter has issues (eg. deadlock) and can't report, the entity is evaluated at error when the
        /// health report expires.
        /// This flags the entity as being in Error health state.
        /// </param>
        /// <param name="isExpired">Returns true if the health event is expired, otherwise false.</param>
        /// <param name="sourceUtcTimestamp">The date and time when the health report was sent by the source.</param>
        /// <param name="lastModifiedUtcTimestamp">The date and time when the health report was last modified by the health
        /// store.</param>
        /// <param name="lastOkTransitionAt">If the current health state is 'Ok', this property returns the time at which the
        /// health report was first reported with 'Ok'.
        /// For periodic reporting, many reports with the same state may have been generated.
        /// This property returns the date and time when the first 'Ok' health report was received.
        /// 
        /// If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last
        /// in 'Ok', before transitioning to a different state.
        /// 
        /// If the health state was never 'Ok', the value will be zero date-time.
        /// </param>
        /// <param name="lastWarningTransitionAt">If the current health state is 'Warning', this property returns the time at
        /// which the health report was first reported with 'Warning'. For periodic reporting, many reports with the same state
        /// may have been generated however, this property returns only the date and time at the first 'Warning' health report
        /// was received.
        /// 
        /// If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in
        /// 'Warning', before transitioning to a different state.
        /// 
        /// If the health state was never 'Warning', the value will be zero date-time.
        /// </param>
        /// <param name="lastErrorTransitionAt">If the current health state is 'Error', this property returns the time at which
        /// the health report was first reported with 'Error'. For periodic reporting, many reports with the same state may
        /// have been generated however, this property returns only the date and time at the first 'Error' health report was
        /// received.
        /// 
        /// If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in
        /// 'Error', before transitioning to a different state.
        /// 
        /// If the health state was never 'Error', the value will be zero date-time.
        /// </param>
        public HealthEvent(
            string sourceId,
            string property,
            HealthState? healthState,
            TimeSpan? timeToLiveInMilliSeconds = default(TimeSpan?),
            string description = default(string),
            string sequenceNumber = default(string),
            bool? removeWhenExpired = default(bool?),
            bool? isExpired = default(bool?),
            DateTime? sourceUtcTimestamp = default(DateTime?),
            DateTime? lastModifiedUtcTimestamp = default(DateTime?),
            DateTime? lastOkTransitionAt = default(DateTime?),
            DateTime? lastWarningTransitionAt = default(DateTime?),
            DateTime? lastErrorTransitionAt = default(DateTime?))
            : base(
                sourceId,
                property,
                healthState,
                timeToLiveInMilliSeconds,
                description,
                sequenceNumber,
                removeWhenExpired)
        {
            this.IsExpired = isExpired;
            this.SourceUtcTimestamp = sourceUtcTimestamp;
            this.LastModifiedUtcTimestamp = lastModifiedUtcTimestamp;
            this.LastOkTransitionAt = lastOkTransitionAt;
            this.LastWarningTransitionAt = lastWarningTransitionAt;
            this.LastErrorTransitionAt = lastErrorTransitionAt;
        }

        /// <summary>
        /// Gets returns true if the health event is expired, otherwise false.
        /// </summary>
        public bool? IsExpired { get; }

        /// <summary>
        /// Gets the date and time when the health report was sent by the source.
        /// </summary>
        public DateTime? SourceUtcTimestamp { get; }

        /// <summary>
        /// Gets the date and time when the health report was last modified by the health store.
        /// </summary>
        public DateTime? LastModifiedUtcTimestamp { get; }

        /// <summary>
        /// Gets if the current health state is 'Ok', this property returns the time at which the health report was first
        /// reported with 'Ok'.
        /// For periodic reporting, many reports with the same state may have been generated.
        /// This property returns the date and time when the first 'Ok' health report was received.
        /// 
        /// If the current health state is 'Error' or 'Warning', returns the date and time at which the health state was last
        /// in 'Ok', before transitioning to a different state.
        /// 
        /// If the health state was never 'Ok', the value will be zero date-time.
        /// </summary>
        public DateTime? LastOkTransitionAt { get; }

        /// <summary>
        /// Gets if the current health state is 'Warning', this property returns the time at which the health report was first
        /// reported with 'Warning'. For periodic reporting, many reports with the same state may have been generated however,
        /// this property returns only the date and time at the first 'Warning' health report was received.
        /// 
        /// If the current health state is 'Ok' or 'Error', returns the date and time at which the health state was last in
        /// 'Warning', before transitioning to a different state.
        /// 
        /// If the health state was never 'Warning', the value will be zero date-time.
        /// </summary>
        public DateTime? LastWarningTransitionAt { get; }

        /// <summary>
        /// Gets if the current health state is 'Error', this property returns the time at which the health report was first
        /// reported with 'Error'. For periodic reporting, many reports with the same state may have been generated however,
        /// this property returns only the date and time at the first 'Error' health report was received.
        /// 
        /// If the current health state is 'Ok' or 'Warning', returns the date and time at which the health state was last in
        /// 'Error', before transitioning to a different state.
        /// 
        /// If the health state was never 'Error', the value will be zero date-time.
        /// </summary>
        public DateTime? LastErrorTransitionAt { get; }
    }
}
